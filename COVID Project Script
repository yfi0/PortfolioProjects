-- Putting main table here for guidelines and reference
SELECT *
 FROM CovidDeaths
 ORDER BY 3, 4

SELECT *
 FROM CovidVaccinations
 ORDER BY 3, 4


-- Select Data that we are using

SELECT location, date, total_cases, new_cases, total_deaths, new_deaths, population
 FROM CovidDeaths
 ORDER BY 1,2


-- Looking at Total Cases vs Total Deaths
    -- Shows likelihood of dying if you contrat covid in specific countries
SELECT location, date, total_cases, total_deaths, (total_deaths/total_cases)*100 as DeathPercentage
 FROM CovidDeaths
 -- looking further into specifics
 -- WHERE location LIKE '%states%' 
 ORDER BY 1,2

-- Looking at Total Cases vs Population
    -- Shows what % of population got Covid
SELECT location, date, Population, total_cases, (total_cases/Population)*100 as PercentPopulationInfected
 FROM CovidDeaths
 -- WHERE location LIKE '%states%' 
 ORDER BY 1,2

--Looking at Countries w/ Highest Infection Rate compared to Population
SELECT location, population, MAX(total_cases) AS TotalInfectionCount, MAX(total_cases/Population)*100 as 
    PercentPopulationInfected
 FROM CovidDeaths
 -- WHERE location LIKE '%states%' 
 GROUP BY location, population
 ORDER BY PercentPopulationInfected DESC


-- Changing focus to Continent instead of location, 
    -- bc this helps drill down into data visualizing

-- Showing Continent w/ Highest Death Count per Population
    -- 1. use 'cast(as)' to convert datatype if needed
    -- 2. only Continent is wanted in location, not Continent
        -- by checking the original table, we know continent would be NULL when location is continent or World
SELECT location, MAX(total_deaths) AS TotalDeathCoun
 FROM CovidDeaths
 -- WHERE location LIKE '%states%'
 WHERE continent IS NULL 
 GROUP BY location
 ORDER BY TotalDeathCoun DESC


-- Start looking at a view point where we are trying to visualize it

-- Everything across entire world = Global numbers

-- Global Death Percentage per day
-- would encounter trouble in GROUP BY date
    --if looking at mulitiple other col/ things which requires aggrate function
SELECT date, SUM(new_cases) as total_cases, SUM(new_deaths) as total_deaths, SUM(new_deaths)/SUM(new_cases)*100 as 
    DeathPercentage
 FROM CovidDeaths
 -- WHERE location LIKE '%states%' 
 -- using continent IS not NULL to filter out the rows w/ location that are not country: continent or world or international
 WHERE continent IS not NULL 
 GROUP BY date
 ORDER BY 1,2

-- Global Total Death Percentage
SELECT SUM(new_cases) as total_cases, SUM(new_deaths) as total_deaths, SUM(new_deaths)/SUM(new_cases)*100 as 
    DeathPercentage
 FROM CovidDeaths
 -- WHERE location LIKE '%states%' 
 -- using continent IS not NULL to filter out the rows w/ location that are not country: continent or world or international
 WHERE continent IS not NULL 
 -- GROUP BY date
 ORDER BY 1,2



-- USE CTE, create new table name and col. names
WITH PopvsVac (Continent, Location, Date, Population, New_Vaccination, RollingPeopleVaccinated)
as 
(
-- Looking at Total Population vs Vaccination
SELECT dea.continent, dea.location, dea.date, dea.population, vac.new_vaccinations,
    -- only partition by location so the aggragration (sum) doesnt go over everytime there is a new location
    -- order by location and date so when it adds up it will only add from each row with the same location and correct order
    SUM(vac.new_vaccinations) OVER (Partition by dea.location ORDER by dea.location, 
    dea.date) as RollingPeopleVaccinated
 From CovidDeaths dea
 JOIN CovidVaccinations vac
    ON dea.location = vac.location
    AND dea.date = vac.date
 WHERE dea.continent is not NULL
 -- ORDER by 2,3
)
SELECT *, (RollingPeopleVaccinated*1.0/Population)*100
FROM PopvsVac


-- TEMP TABLE

DROP TABLE if EXISTS #PercentPopulationVaccinated
 CREATE TABLE #PercentPopulationVaccinated
 (
 Continent NVARCHAR(255),
 Location NVARCHAR(255),
 Date DATE,
 Population NUMERIC,
 New_vaccinations NUMERIC,
 RollingPeopleVaccinated NUMERIC
 )

Insert into #PercentPopulationVaccinated
SELECT dea.continent, dea.location, dea.date, dea.population, vac.new_vaccinations,
    -- only partition by location so the aggragration (sum) doesnt go over everytime there is a new location
    -- order by location and date so when it adds up it will only add from each row with the same location and correct order
    SUM(vac.new_vaccinations) OVER (Partition by dea.location ORDER by dea.location, 
    dea.date) as RollingPeopleVaccinated
 From CovidDeaths dea
 JOIN CovidVaccinations vac
    ON dea.location = vac.location
    AND dea.date = vac.date
 -- WHERE dea.continent is not NULL
 -- ORDER by 2,3

SELECT *, (RollingPeopleVaccinated*1.0/Population)*100
 FROM #PercentPopulationVaccinated


-- Creating View to store data for later visuaalization

Create View PercentPopulationVaccinated as 
SELECT dea.continent, dea.location, dea.date, dea.population, vac.new_vaccinations,
    -- only partition by location so the aggragration (sum) doesnt go over everytime there is a new location
    -- order by location and date so when it adds up it will only add from each row with the same location and correct order
    SUM(vac.new_vaccinations) OVER (Partition by dea.location ORDER by dea.location, 
    dea.date) as RollingPeopleVaccinated
 From CovidDeaths dea
 JOIN CovidVaccinations vac
    ON dea.location = vac.location
    AND dea.date = vac.date
 WHERE dea.continent is not NULL
 -- ORDER by 2,3
 
SELECT *
FROM PercentPopulationVaccinated




